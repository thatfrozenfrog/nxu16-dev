//#include "classwiz_bsp.h"

#include "classwiz_bsp.h"
#define PI 3
typedef short int16_t;
#define double float
const float sin_table[256] = {
    0.00, 0.02, 0.05, 0.07, 0.10, 0.12, 0.15, 0.17,
    0.20, 0.22, 0.24, 0.27, 0.29, 0.31, 0.34, 0.36,
    0.38, 0.41, 0.43, 0.45, 0.47, 0.49, 0.52, 0.53,
    0.55, 0.58, 0.59, 0.62, 0.63, 0.66, 0.67, 0.69,
    0.71, 0.73, 0.74, 0.76, 0.77, 0.79, 0.80, 0.82,
    0.83, 0.84, 0.86, 0.87, 0.88, 0.89, 0.91, 0.91,
    0.92, 0.93, 0.95, 0.95, 0.95, 0.96, 0.97, 0.98,
    0.98, 0.98, 0.99, 0.99, 0.99, 1.00, 1.00, 1.00,
    1.00, 1.00, 1.00, 1.00, 0.99, 0.99, 0.99, 0.98,
    0.98, 0.98, 0.97, 0.96, 0.95, 0.95, 0.95, 0.93,
    0.92, 0.91, 0.91, 0.89, 0.88, 0.87, 0.86, 0.84,
    0.83, 0.82, 0.80, 0.79, 0.77, 0.76, 0.74, 0.73,
    0.71, 0.69, 0.67, 0.66, 0.63, 0.62, 0.59, 0.58,
    0.55, 0.53, 0.52, 0.49, 0.47, 0.45, 0.43, 0.41,
    0.38, 0.36, 0.34, 0.31, 0.29, 0.27, 0.24, 0.22,
    0.20, 0.17, 0.15, 0.12, 0.10, 0.07, 0.05, 0.02,
    0.00, -0.02, -0.05, -0.07, -0.10, -0.12, -0.15, -0.17,
    -0.20, -0.22, -0.24, -0.27, -0.29, -0.31, -0.34, -0.36,
    -0.38, -0.41, -0.43, -0.45, -0.47, -0.49, -0.52, -0.53,
    -0.55, -0.58, -0.59, -0.62, -0.63, -0.66, -0.67, -0.69,
    -0.71, -0.73, -0.74, -0.76, -0.77, -0.79, -0.80, -0.82,
    -0.83, -0.84, -0.86, -0.87, -0.88, -0.89, -0.91, -0.91,
    -0.92, -0.93, -0.95, -0.95, -0.95, -0.96, -0.97, -0.98,
    -0.98, -0.98, -0.99, -0.99, -0.99, -1.00, -1.00, -1.00,
    -1.00, -1.00, -1.00, -1.00, -0.99, -0.99, -0.99, -0.98,
    -0.98, -0.98, -0.97, -0.96, -0.95, -0.95, -0.95, -0.93,
    -0.92, -0.91, -0.91, -0.89, -0.88, -0.87, -0.86, -0.84,
    -0.83, -0.82, -0.80, -0.79, -0.77, -0.76, -0.74, -0.73,
    -0.71, -0.69, -0.67, -0.66, -0.63, -0.62, -0.59, -0.58,
    -0.55, -0.53, -0.52, -0.49, -0.47, -0.45, -0.43, -0.41,
    -0.38, -0.36, -0.34, -0.31, -0.29, -0.27, -0.24, -0.22,
    -0.20, -0.17, -0.15, -0.12, -0.10, -0.07, -0.05, -0.02,
};

// 16-bit fixed point cosine table (8 fractional bits)
const float cos_table[256] = {
    1.00, 1.00, 1.00, 1.00, 0.99, 0.99, 0.99, 0.98,
    0.98, 0.98, 0.97, 0.96, 0.95, 0.95, 0.95, 0.93,
    0.92, 0.91, 0.91, 0.89, 0.88, 0.87, 0.86, 0.84,
    0.83, 0.82, 0.80, 0.79, 0.77, 0.76, 0.74, 0.73,
    0.71, 0.69, 0.67, 0.66, 0.63, 0.62, 0.59, 0.58,
    0.55, 0.53, 0.52, 0.49, 0.47, 0.45, 0.43, 0.41,
    0.38, 0.36, 0.34, 0.31, 0.29, 0.27, 0.24, 0.22,
    0.20, 0.17, 0.15, 0.12, 0.10, 0.07, 0.05, 0.02,
    0.00, -0.02, -0.05, -0.07, -0.10, -0.12, -0.15, -0.17,
    -0.20, -0.22, -0.24, -0.27, -0.29, -0.31, -0.34, -0.36,
    -0.38, -0.41, -0.43, -0.45, -0.47, -0.49, -0.52, -0.53,
    -0.55, -0.58, -0.59, -0.62, -0.63, -0.66, -0.67, -0.69,
    -0.71, -0.73, -0.74, -0.76, -0.77, -0.79, -0.80, -0.82,
    -0.83, -0.84, -0.86, -0.87, -0.88, -0.89, -0.91, -0.91,
    -0.92, -0.93, -0.95, -0.95, -0.95, -0.96, -0.97, -0.98,
    -0.98, -0.98, -0.99, -0.99, -0.99, -1.00, -1.00, -1.00,
    -1.00, -1.00, -1.00, -1.00, -0.99, -0.99, -0.99, -0.98,
    -0.98, -0.98, -0.97, -0.96, -0.95, -0.95, -0.95, -0.93,
    -0.92, -0.91, -0.91, -0.89, -0.88, -0.87, -0.86, -0.84,
    -0.83, -0.82, -0.80, -0.79, -0.77, -0.76, -0.74, -0.73,
    -0.71, -0.69, -0.67, -0.66, -0.63, -0.62, -0.59, -0.58,
    -0.55, -0.53, -0.52, -0.49, -0.47, -0.45, -0.43, -0.41,
    -0.38, -0.36, -0.34, -0.31, -0.29, -0.27, -0.24, -0.22,
    -0.20, -0.17, -0.15, -0.12, -0.10, -0.07, -0.05, -0.02,
    0.00, 0.02, 0.05, 0.07, 0.10, 0.12, 0.15, 0.17,
    0.20, 0.22, 0.24, 0.27, 0.29, 0.31, 0.34, 0.36,
    0.38, 0.41, 0.43, 0.45, 0.47, 0.49, 0.52, 0.53,
    0.55, 0.58, 0.59, 0.62, 0.63, 0.66, 0.67, 0.69,
    0.71, 0.73, 0.74, 0.76, 0.77, 0.79, 0.80, 0.82,
    0.83, 0.84, 0.86, 0.87, 0.88, 0.89, 0.91, 0.91,
    0.92, 0.93, 0.95, 0.95, 0.95, 0.96, 0.97, 0.98,
    0.98, 0.98, 0.99, 0.99, 0.99, 1.00, 1.00, 1.00,
};
void set_pixel(byte x, byte y)
{
	*(byte __near *)(0xf800 + (ushort)y * 0x20 + (x / 8)) |= 0x80 >> (x & 7);
}

double cosf(double r){

	long a = r;
	a = a & 255;
	return cos_table[a];
}
double sinf(double r){
	long a = r;
	a = a & 255;
	return sin_table[a];
}



void plot_line (int x0, int y0, int x1, int y1)
{
  int dx =  abs (x1 - x0), sx = x0 < x1 ? 1 : -1;
  int dy = -abs (y1 - y0), sy = y0 < y1 ? 1 : -1;
  int err = dx + dy, e2;

  for (;;){
    set_pixel (x0,y0);
    if (x0 == x1 && y0 == y1) break;
    e2 = 2 * err;
    if (e2 >= dy) { err += dy; x0 += sx; }
    if (e2 <= dx) { err += dx; y0 += sy; }
  }
}





int main()
{
    memzero_n((void __near *)0x9000, ((ushort)0xef00 - (ushort)0x9000));
	reset_sfrs();
	delay(1600);
	FCON = 0x81;
	reset_screen_sfrs();
	memzero_n((void __near *)GetScreenBuffer(), 0x600 * 2);
	double rotatedX = 0, rotatedY = 0, rotatedZ = 0;
	int scalex = 24; // (192 - 4) / 8
	int scaley = 24; // (63 - 4) / 8
	int transx = 94; // (192 - 4) / 2
	int transy = 30; // (63 - 4) / 2

	double rotatedCorners[8][3] = {
		{0, 0, 0},
		{0, 0, 0},
		{0, 0, 0},
		{0, 0, 0},
		{0, 0, 0},
		{0, 0, 0},
		{0, 0, 0},
		{0, 0, 0},
	};

	double ax = 0.0;
	double ay = 0.0;
	double az = 0.0;

	int edges[24][2] = {
    {0, 1}, {1, 3}, {3, 2}, {2, 0},
    {0, 4}, {1, 5}, {2, 6}, {3, 7},
    {4, 5}, {5, 7}, {7, 6}, {6, 4}
	};


	const int cube_corners[8][3] = {
		{-1, -1, -1},
		{1, -1, -1},
		{-1, -1, 1},
		{1, -1, 1},
		{-1, 1, -1},
		{1, 1, -1},
		{-1, 1, 1},
		{1, 1, 1},
	};

/*	int edges[8][2] = {
		{0, 1}, {0, 2}, {0, 3}, {0, 4},
		{1, 2}, {2, 3}, {3, 4}, {4, 1}
	};


	const float cube_corners[8][3] = {
		{2, 2, -2},
		{-1, -1, -1},
		{-1, -1, 1},
		{1, 1, 1},
		{1, 1, -1}
	};*/

	memzero_n((void __near *)0xF820, 0x600 * 2);

	while(1){
		ax += 0.3 / 10;
		ay += 0.8 / 10;
		az += 0.13 / 10;
		if (ax > 2*PI){
			ax = fmodf(ax, 2*PI);
		}
		if (ax > 2*PI){
			ax = fmodf(ax, 2*PI);
		}
		if (az > 2*PI){
			az = fmodf(az, 2*PI);
		}
		

		for (int i = 0; i < sizeof(cube_corners) / sizeof(cube_corners[0]); i++) {
			double x = cube_corners[i][0];
			double y = cube_corners[i][1];
			double z = cube_corners[i][2];
			double oldax = ax;
			double olday = ay;
			double oldaz = az;
			ax *= 256 / (PI*2);
			ay *= 256 / (PI*2);
			az *= 256 / (PI*2);
			rotatedX = x;
			rotatedY = (y * cosf(ax)) - (z * sinf(ax));
			rotatedZ = (y * sinf(ax)) + (z * cosf(ax));

			x = rotatedX;
			y = rotatedY;
			z = rotatedZ;

			rotatedX = (x * cosf(ay)) + (z * sinf(ay));
			rotatedY = y;
			rotatedZ = -(x * sinf(ay)) + (z * cosf(ay));

			x = rotatedX;
			y = rotatedY;
			z = rotatedZ;

			rotatedX = (x * cosf(az)) - (y * sinf(az));
			rotatedY = (x * sinf(az)) + (y * cosf(az));
			rotatedZ = z;

			rotatedCorners[i][0] = rotatedX;
			rotatedCorners[i][1] = rotatedY;
			rotatedCorners[i][2] = rotatedZ;
			
			ax = oldax;
			ay = olday;
			az = oldaz;


		};

		memzero_n((void __near *)GetScreenBuffer(), 0x600 * 2);

		for (int j = 0; j < sizeof(edges) / sizeof(edges[0]); j++) {
			int fromIndex = edges[j][0];
			int toIndex = edges[j][1];

			double from[2] = {
				rotatedCorners[fromIndex][0] * scalex + transx,
				rotatedCorners[fromIndex][1] * scaley + transy
			};
			double to[2] = {
				rotatedCorners[toIndex][0] * scalex + transx,
				rotatedCorners[toIndex][1] * scaley + transy
			};
			plot_line(from[0], from[1], to[0], to[1]);
		}

	}


	
	__asm("brk");
	
}
	/*
	for (int i = 0; i < 192; i++)
	{
		//set_pixel(i, cosf((i - 96) / 10.0f) * 12.0f + 24.0f);
		plot_line(0x00,0x00,cosf((i - 96) / 10.0f) * 12.0f + 24.0f,sinf((i - 96) / 10.0f) * 12.0f + 24.0f);
		//memzero_n((void __near *)GetScreenBuffer(), 0x600 * 2);
		//line_print_f(test, i, cosf((i - 96) / 10.0f) * 12.0f + 24.0f);
		delay(100);
	}*/


